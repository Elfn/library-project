version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION:-latest}
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      #ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - ${GLOBAL_NETWORK:-kafka}
  schema-registry:
    # schema-registry is used to register a schemas for a Kafka topic
    # it checks and forces producers and consumers to use a valid schema
    # Producers and consumers check schema with ID and cache the result
    # before sending and receiving data
    image: confluentinc/cp-schema-registry:${KAFKA_VERSION}
    hostname: schema-registry
    depends_on:
      - zookeeper
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8083:8083"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8083
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:  
      - ${GLOBAL_NETWORK:-kafka}
  # kafka_init:
  #   build: .
  #   depends_on:
  #     - kafka-broker-1
  #     - kafka-broker-2
  #     - kafka-broker-3
  kafka-broker-1:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    user: root
    command: bash -c "/etc/confluent/docker/run"
    hostname: kafka-broker-1
    ports:
      - "9092:9092"
      - "9095:9095"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9095,PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,PLAINTEXT:PLAINTEXT
      KAFKA_SSL_KEYSTORE_FILENAME: server.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: ssl.creds
      # KAFKA_SSL_KEYSTORE_PASSWORD: password
      # KAFKA_SSL_KEY_PASSWORD: password
      KAFKA_SSL_TRUSTSTORE_FILENAME: client.truststore.jks
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_COMPRESSION_TYPE: producer
      KAFKA_MIN_IN_SYNC_REPLICAS: 2
      KAFKA_SSL_CLIENT_AUTH: 'required'
    volumes: 
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./ssl/:/etc/kafka/secrets
    networks:
      - ${GLOBAL_NETWORK:-kafka}
  kafka-broker-2:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    user: root
    command: bash -c "/etc/confluent/docker/run"
    hostname: kafka-broker-2
    ports:
      - "9093:9093"
      - "9096:9096"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9095,PLAINTEXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,PLAINTEXT:PLAINTEXT
      KAFKA_SSL_KEYSTORE_FILENAME: server.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: ssl.creds
      # KAFKA_SSL_KEYSTORE_PASSWORD: password
      # KAFKA_SSL_KEY_PASSWORD: password
      KAFKA_SSL_TRUSTSTORE_FILENAME: client.truststore.jks
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_COMPRESSION_TYPE: producer
      KAFKA_MIN_IN_SYNC_REPLICAS: 2
      KAFKA_SSL_CLIENT_AUTH: 'required'
    volumes: 
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./ssl/:/etc/kafka/secrets
    networks:
      - ${GLOBAL_NETWORK:-kafka}
  kafka-broker-3:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    user: root
    command: bash -c "/etc/confluent/docker/run"
    hostname: kafka-broker-3
    ports:
      - "9094:9094"
      - "9097:9097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      ZOOKEEPER_SASL_ENABLED: 'false'
      KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9095,PLAINTEXT://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,PLAINTEXT:PLAINTEXT
      KAFKA_SSL_KEYSTORE_FILENAME: server.keystore.jks
      KAFKA_SSL_KEY_CREDENTIALS: ssl.creds
      # KAFKA_SSL_KEYSTORE_PASSWORD: password
      # KAFKA_SSL_KEY_PASSWORD: password
      KAFKA_SSL_TRUSTSTORE_FILENAME: client.truststore.jks
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_COMPRESSION_TYPE: producer
      KAFKA_MIN_IN_SYNC_REPLICAS: 2
      KAFKA_SSL_CLIENT_AUTH: 'required'
    volumes: 
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./ssl/:/etc/kafka/secrets
    networks:
      - ${GLOBAL_NETWORK:-kafka}